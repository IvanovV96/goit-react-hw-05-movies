{"version":3,"file":"static/js/797.ae2f0a30.chunk.js","mappings":"2SAiEA,EA1DkB,WAChB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,MACAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,qGACKC,EAAAA,EAAAA,IAAeP,GADpB,OACRQ,EADQ,OAEdJ,EAASI,EAAKA,MAFA,2CAAH,qDAIbF,GACD,GAAE,CAACN,IAEJ,IAAQS,EACNN,EADMM,YAAaC,EACnBP,EADmBO,MAAOC,EAC1BR,EAD0BQ,SAAUC,EACpCT,EADoCS,OAAQC,EAC5CV,EAD4CU,aAAcC,EAC1DX,EAD0DW,aAG5D,OACE,UAACC,EAAA,EAAD,CAAKC,EAAE,OAAP,WACE,UAACD,EAAA,EAAD,CAAKE,QAAQ,OAAb,UACGR,IACC,gBAAKS,IAAG,UAAKC,EAAAA,IAAL,OAAeV,GAAeW,IAAKV,EAAOW,MAAM,WAE1D,UAACN,EAAA,EAAD,CAAKE,QAAQ,OAAOK,cAAc,SAASC,GAAG,OAA9C,UACGT,IACC,gBAAIU,MAAO,CAAEC,OAAQ,GAArB,oBACUf,EADV,IACkBI,EAAaY,UAAU,EAAG,GAD5C,QAKF,0BACE,uCADF,IACsBb,MAEtB,0BACE,qCADF,IACoBF,MAEpB,0BACE,mCADF,IACkBC,GAAUA,EAAOe,KAAI,SAAAC,GAAK,OAAIA,EAAMC,KAAO,GAAjB,cAIhD,UAACd,EAAA,EAAD,CAAKe,GAAG,OAAOC,UAAU,SAAzB,WACE,wBACE,qDAEF,2BACE,SAAC,IAAD,WACE,SAAC,KAAD,CAASC,GAAI,OAAb,qBAEF,SAAC,IAAD,WACE,SAAC,KAAD,CAASA,GAAI,UAAb,8BAIN,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C,yGC7DYC,EAAOC,EAAAA,EAAAA,GAAH,6HAQJC,EAAWD,EAAAA,EAAAA,GAAH,sN,0NCTRlB,EAAU,kCACvBoB,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACZF,EAAAA,GAAAA,IAAA,qCAAwCC,IAD5B,cACzBhC,EADyB,yBAExBA,GAFwB,2CAAH,qDAKjBD,EAAc,mCAAG,WAAMmC,GAAN,uFACTH,EAAAA,GAAAA,IAAA,gBAAmBG,EAAnB,oBAAiCF,IADxB,cACtBhC,EADsB,yBAErBA,GAFqB,2CAAH,sDAKdmC,EAAgB,mCAAG,WAAMD,GAAN,uFACXH,EAAAA,GAAAA,IAAA,gBAAmBG,EAAnB,4BAAyCF,IAD9B,cACxBhC,EADwB,yBAEvBA,GAFuB,2CAAH,sDAKhBoC,EAAgB,mCAAG,WAAMF,GAAN,uFACXH,EAAAA,GAAAA,IAAA,gBAAmBG,EAAnB,4BAAyCF,IAD9B,cACxBhC,EADwB,yBAEvBA,GAFuB,2CAAH,sDAKhBqC,EAAiB,mCAAG,yGAAOC,EAAP,+BAAe,GAAf,SACZP,EAAAA,GAAAA,IAAA,+BACOC,EADP,kBACwBM,IAFZ,cACzBtC,EADyB,yBAIxBA,GAJwB,2CAAH,oD","sources":["components/MovieInfo/MovieInfo.jsx","components/TrendingFilms/TrendingFilms.styled.js","services/axios.js"],"sourcesContent":["import Box from 'components/Box/Box';\nimport Loader from 'components/Loader';\nimport { ListItem } from 'components/TrendingFilms/TrendingFilms.styled';\nimport { Suspense, useEffect, useState } from 'react';\nimport { NavLink, Outlet, useParams } from 'react-router-dom';\nimport { fetchMovieById, IMG_URL } from 'services/axios';\n\nconst MovieInfo = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  useEffect(() => {\n    const getFilm = async () => {\n      const data = await fetchMovieById(movieId);\n      setMovie(data.data);\n    };\n    getFilm();\n  }, [movieId]);\n\n  const { poster_path, title, overview, genres, vote_average, release_date } =\n    movie;\n\n  return (\n    <Box p=\"20px\">\n      <Box display=\"flex\">\n        {poster_path && (\n          <img src={`${IMG_URL}${poster_path}`} alt={title} width=\"300px\" />\n        )}\n        <Box display=\"flex\" flexDirection=\"column\" ml=\"10px\">\n          {release_date && (\n            <h2 style={{ margin: 0 }}>\n              Title: {title}({release_date.substring(0, 4)})\n            </h2>\n          )}\n\n          <p>\n            <b>User score:</b> {vote_average}\n          </p>\n          <p>\n            <b>Overview:</b> {overview}\n          </p>\n          <p>\n            <b>Genres:</b> {genres && genres.map(genre => genre.name + ' ')}\n          </p>\n        </Box>\n      </Box>\n      <Box mt=\"20px\" textAlign=\"center\">\n        <p>\n          <b>Additional information</b>\n        </p>\n        <ul>\n          <ListItem>\n            <NavLink to={'cast'}>Cast</NavLink>\n          </ListItem>\n          <ListItem>\n            <NavLink to={'reviews'}>Reviews</NavLink>\n          </ListItem>\n        </ul>\n      </Box>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </Box>\n  );\n};\n\nexport default MovieInfo;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  flex-wrap: wrap;\n  margin-top: 30px;\n`;\n\nexport const ListItem = styled.li`\n  text-align: center;\n  font-size: 20px;\n\n  a {\n    color: black;\n    text-decoration: none;\n    :visited {\n      color: inherit;\n    }\n    :hover {\n      color: teal;\n    }\n  }\n`;\n","import axios from 'axios';\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'bb85da72485cd2efa68a1ef9ab108fb4';\n\nexport const fetchTrendingData = async () => {\n  const data = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const data = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchCreditsById = async id => {\n  const data = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchReviewsById = async id => {\n  const data = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMoviesByName = async (query = '') => {\n  const data = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return data;\n};\n"],"names":["movieId","useParams","useState","movie","setMovie","useEffect","getFilm","fetchMovieById","data","poster_path","title","overview","genres","vote_average","release_date","Box","p","display","src","IMG_URL","alt","width","flexDirection","ml","style","margin","substring","map","genre","name","mt","textAlign","to","Suspense","fallback","Loader","List","styled","ListItem","axios","API_KEY","fetchTrendingData","id","fetchCreditsById","fetchReviewsById","fetchMoviesByName","query"],"sourceRoot":""}